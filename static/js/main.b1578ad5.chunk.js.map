{"version":3,"sources":["components/Nav/index.js","components/AnimalCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","userGuess","correct","didGameStart","react_default","a","createElement","className","score","topScore","AnimalCard","animals","map","object","key","id","onClick","handleSelected","alt","name","src","process","image","Wrapper","children","App","state","top_score","gameStarted","selected","addScore","_this","setState","setTopScore","showGuess","guess","console","log","gameEnd","indexOf","setTimeout","concat","shuffle","array","i","length","j","Math","floor","random","_ref","components_Nav","this","components_Wrapper","components_AnimalCard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1578ad5.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"./style.css\";\n\n\nfunction Nav(props){\n  const userGuess = props.correct;\n  let startGame = props.didGameStart;\n  if(!startGame){\n    return(\n\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <ul className=\"navbar-nav nav-fill w-100\">\n          <li className=\"nav-item\">Clicky Game</li>\n          <li className=\"nav-item\">Click any image to begin</li>\n          <li className=\"nav-item\">Score {props.score} | Top Score {props.topScore}</li>\n      </ul>\n      </nav>\n   ); \n  }\n  else{\n    return(\n\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <ul className=\"navbar-nav nav-fill w-100\">\n          <li className=\"nav-item\">Clicky Game</li>\n          \n          {userGuess\n            ? <li className=\"nav-item\">You Guessed Correctly!</li>\n            : <li className=\"nav-item\">You Guessed Incorrectly!</li>\n            }\n          \n          \n          <li className=\"nav-item\">Score {props.score} | Top Score {props.topScore}</li>\n      </ul>\n      </nav>\n   ); \n  };\n  \n  \n};\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction AnimalCard(props) {\n  return (\n     <div className = \"container\">\n      {props.animals.map(object=> (\n       <div className=\"card\" key ={object.id}>\n        <div className=\"img-container\" id={object.id}\n            onClick={() => props.handleSelected(object.id)}>\n          <img alt={object.name} src={process.env.PUBLIC_URL + object.image} />\n        </div>\n        </div>\n        ))}\n        \n    \n      {/* <span className=\"remove\" onClick={() => props.remove()}>ùòÖ</span> */}\n      {/* Both of these ways work\n      <span className=\"remove\" onClick={() => props.remove(props.id)}>ùòÖ</span> */}\n\n    </div>\n  );\n}\n\nexport default AnimalCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport Nav from \"./components/Nav\"\nimport AnimalCard from \"./components/AnimalCard\"\nimport Wrapper from \"./components/Wrapper\"\nimport animals from \"./animals.json\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends React.Component{\n\n  state ={\n    animals: animals,\n    score: 0,\n    top_score: 0,\n    correct: true,\n    gameStarted: false,\n    selected: []\n  };\n\n  addScore = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  setTopScore = () =>{\n    if(this.state.top_score < this.state.score){\n      this.setState({top_score: this.state.score})\n    }\n  };\n\n//show if guess is correct or incorrect to user\n  showGuess = () =>{\n    let guess = \"Correct!\"\n    if(this.state.correct !== true){\n       guess = \"Incorrect!\";\n    }\n    console.log(guess);\n    //console.log(this.state.correct);\n    return this.state.correct;\n  }\n\n  \n  gameEnd = () =>{\n    console.log(\"game over\");\n    \n    this.setTopScore();\n\n    this.setState({score: 0});\n    this.setState({selected: []});\n    this.setState({gameStarted:false});\n    this.setState({correct: true});\n  }\n  \n\n  handleSelected = (id) =>{\n    console.log(id);\n    \n    this.setState({gameStarted: true});\n\n    if (this.state.selected.indexOf(id)!== -1){\n      //set state and then do all other stuff\n      this.setState({correct: false}, ()=>{\n        this.showGuess();\n        setTimeout(this.gameEnd, 3000)\n       \n      });\n      \n    }\n   else{\n      //let joinedArray = this.state.selected.concat(id);\n      this.setState({selected: this.state.selected.concat(id)}, ()=>{\n        console.log(\"selected: \"+ this.state.selected)\n        this.addScore();\n        this.showGuess();\n        this.setState({animals: this.shuffle(this.state.animals)})\n      });\n       \n    }\n    //console.log(this.state.selected);\n  };\n\n\n  //Fisher-Yates shuffle algorithm\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]]; // swap elements\n    }\n    return array;\n  };\n\n\n  render(){\n    return (\n      <div>\n      <Nav correct={this.state.correct} score={this.state.score} topScore={this.state.top_score} didGameStart = {this.state.gameStarted}/>\n    <Wrapper>\n    <AnimalCard animals = {this.state.animals} handleSelected = {this.handleSelected}/>\n     \n    </Wrapper>\n    </div>\n    )\n  }\n\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}